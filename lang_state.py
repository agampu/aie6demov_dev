# In your app.py, or a separate state.py file if you prefer

from typing import TypedDict, List, Optional, Dict, Any
from langchain_core.documents import Document
from langchain_core.messages import BaseMessage # For storing conversation history

class CreativeWriterAssistantState(TypedDict):
    # --- Step 1: Conversation with Guide ---
    # Stores the full conversation history with LLM 1 (The Guide)
    # This helps LLM 1 maintain context if the initial interaction is multi-turn.
    guide_conversation_history: Optional[List[BaseMessage]] 
    # The user's expressed interest, summarized or directly captured
    user_writing_interest: Optional[str] 

    # --- Step 2: Query Formulation ---
    # The search query generated by LLM 2 for Qdrant
    qdrant_search_query: Optional[str]

    # --- Step 3: Retrieval ---
    # The raw prompt document retrieved from Qdrant (could be a list if k > 1)
    retrieved_prompt_document: Optional[Document] # Assuming k=1 for simplicity now
    # If k > 1, this would be List[Document]

    # --- Step 4: Creative Augmentation ---
    # The "What If...?" question or other augmentation from LLM 3
    prompt_augmentation_text: Optional[str]

    # --- Step 5: User Writes ---
    # The text written by the user in response to the prompt and augmentation
    user_written_text: Optional[str]

    # --- Step 6: Feedback from Mentor ---
    # The feedback/observations provided by LLM 4
    mentor_feedback: Optional[str]

    # --- General / Control ---
    # To track which step we are in or what the next action should be
    # This is useful for routing in LangGraph
    current_step_name: Optional[str] 
    # Any error messages encountered during the flow
    error_message: Optional[str] 
    # Can hold intermediate LLM responses or other temporary data if needed
    intermediate_llm_responses: Optional[Dict[str, Any]] 
